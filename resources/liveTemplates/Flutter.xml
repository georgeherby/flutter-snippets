<?xml version="1.0" encoding="UTF-8"?>
<templateSet group="Flutter">
    <!--    AnimatedBuilder    -->
    <template name="animBldr" value="AnimatedBuilder(&#10;  animation: $animationController$,&#10;  child: $childWidget$,&#10;  builder: (BuildContext context, Widget child) {&#10;    return $buildWidget$;&#10;  },&#10;);" description="New AnimatedBuilder" toReformat="false" toShortenFQNames="true">
        <variable name="animationController" expression="&quot;animationController&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="childWidget" expression="&quot;childWidget&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="buildWidget" expression="&quot;buildWidget&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <!--    CustomScrollView-->
    <template name="customScrollV" value="CustomScrollView(&#10;slivers: &lt;Widget&gt;[&#10;$childWidget1$,&#10;$childWidget2$,&#10;$childWidget3$,&#10;],&#10;)" description="New CustomScrollView" toReformat="false" toShortenFQNames="true">
        <variable name="childWidget1" expression="&quot;childWidget1&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="childWidget2" expression="&quot;childWidget2&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="childWidget3" expression="&quot;childWidget3&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <!--    FutureBuilder-->
    <template name="futureBldr"
              value="FutureBuilder(&#10;future: $FUTURE$,initialData: $INITIAL$,builder: (BuildContext context, AsyncSnapshot snapshot) {if (snapshot.hasData) {if (snapshot.data!=null) {return $WIDGET$;} else {return CircularProgressIndicator();}}),"
              description="Create FutureBuilder" toReformat="true" toShortenFQNames="true">
        <variable name="FUTURE" expression="&quot;future&quot;" defaultValue="" alwaysStopAt="true"/>
        <variable name="INITIAL" expression="&quot;initialValue&quot;" defaultValue="" alwaysStopAt="true"/>
        <variable name="WIDGET" expression="&quot;widget&quot;" defaultValue="" alwaysStopAt="true"/>
        <context>
            <option name="DART_STATEMENT" value="true"/>
        </context>
    </template>
    <!--    LayoutBuilder-->
    <template name="layoutBldr" value="LayoutBuilder(&#10;builder: (BuildContext context, BoxConstraints constraints) {&#10;return $widget$;&#10;},&#10;)," description="New LayoutBuilder" toReformat="false" toShortenFQNames="true">
        <variable name="widget" expression="&quot;widget&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <!--    SingleChildScrollView-->
    <template name="singleChildScrollV" value="SingleChildScrollView(&#10;controller: $controller$, // Optional&#10;child: $widget$,&#10;)," description="New SingleChildScrollView" toReformat="false" toShortenFQNames="true">
        <variable name="controller" expression="&quot;controller&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="widget" expression="&quot;widget&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <!--    StreamBuilder-->
    <template name="streamBldr"
              value="StreamBuilder(stream: $STREAM$, builder: (BuildContext context, AsyncSnapshot snapshot) {if(snapshot.hasError) return $ERRORWIDGET$; switch (snapshot.connectionState) {case ConnectionState.none: return $DEFAULTWIDGET$;case ConnectionState.waiting: return $LOADINGWIDGET$;case ConnectionState.active: return $ACTIVEWIDGET$;case ConnectionState.done: return $FINISHEDWIDGET$;}return null; // unreachable}, ),"
              description="Create StreamBuilder" toReformat="true" toShortenFQNames="true">
        <variable name="STREAM" expression="&quot;stream&quot;" defaultValue="" alwaysStopAt="true"/>
        <variable name="DEFAULTWIDGET" expression="&quot;ConnectionNone&quot;" defaultValue="" alwaysStopAt="true"/>
        <variable name="LOADINGWIDGET" expression="&quot;ConnectionWaiting&quot;" defaultValue="" alwaysStopAt="true"/>
        <variable name="ACTIVEWIDGET" expression="&quot;ConnectionActive&quot;" defaultValue="" alwaysStopAt="true"/>
        <variable name="FINISHEDWIDGET" expression="&quot;ConnectionDone&quot;" defaultValue="" alwaysStopAt="true"/>
        <context>
            <option name="DART_STATEMENT" value="true"/>
        </context>
    </template>
    <template name="listviewBldr"
              value="ListView.builder(itemCount: $COUNT$,itemBuilder: (BuildContext context, int index) {return $WIDGET$;}, ),"
              description="Create ListView.builder" toReformat="true" toShortenFQNames="true">
        <variable name="COUNT" expression="&quot;future&quot;" defaultValue="" alwaysStopAt="true"/>
        <variable name="WIDGET" expression="&quot;widget&quot;" defaultValue="" alwaysStopAt="true"/>
        <context>
            <option name="DART_STATEMENT" value="true"/>
        </context>
    </template>
    <!--    showDialog-->
    <template name="showDialog"
              value="showDialog&lt;void&gt;(&#10;context: $context$,&#10;barrierDismissible: $dismiss$, // false = user must tap button, true = tap outside dialog&#10;builder: (BuildContext dialogContext){&#10;return AlertDialog(&#10;title: Text('$title$'),&#10;content: Text('$content$'),&#10;actions: &lt;Widget&gt;[&#10;FlatButton(&#10;child: Text('$buttonText$'),&#10;onPressed: () {&#10;Navigator.of(dialogContext).pop(); // Dismiss alert dialog&#10;},&#10;),&#10;],&#10;);&#10;},&#10;);"
              description="New AlertDialog" toReformat="false" toShortenFQNames="true">
        <variable name="context" expression="&quot;context&quot;" defaultValue="" alwaysStopAt="true"/>
        <variable name="dismiss" expression="&quot;barrierDismissible&quot;" defaultValue="" alwaysStopAt="true"/>
        <variable name="title" expression="&quot;title&quot;" defaultValue="" alwaysStopAt="true"/>
        <variable name="content" expression="&quot;dialogBody&quot;" defaultValue="" alwaysStopAt="true"/>
        <variable name="buttonText" expression="&quot;buttonText&quot;" defaultValue="" alwaysStopAt="true"/>
        <context>
            <option name="DART_STATEMENT" value="true"/>
        </context>
    </template>
    <!--    New Scaffold with AppBar, Fab and Bottom Nav Bar-->
    <template name="scfAll" value="int _index = 0; // Make sure this is outside build(), otherwise every setState will chage the value back to 0 &#10;&#10;return Scaffold(&#10;appBar: AppBar(&#10;title: Text('$appbarTitle$'),&#10;),&#10;body: Center(&#10;child: Container(child: Text('You are looking at the message for bottom navigation item $_index')),&#10;),&#10;bottomNavigationBar: BottomNavigationBar(&#10;onTap: (tappedItemIndex)=&gt; setState(() {&#10;_index = tappedItemIndex;&#10;}),&#10;currentIndex: _index,&#10;items: [&#10;BottomNavigationBarItem(icon: Icon(Icons.av_timer), title: Text('$navBarItem1Text$')),&#10;BottomNavigationBarItem(icon: Icon(Icons.add), title: Text('$navBarItem2Text$'))&#10;]),&#10;floatingActionButton: FloatingActionButton(&#10;onPressed: () =&gt; setState(() {&#10;=_index = 0;&#10;}),&#10;tooltip: 'Reset Navigation Index',&#10;        child: Icon(Icons.clear), //Change Icon&#10;),&#10;floatingActionButtonLocation: FloatingActionButtonLocation.endFloat, //Change for different locations&#10;);" description="New Scaffold with AppBar, Fab and Bottom Nav Bar" toReformat="false" toShortenFQNames="true">
        <variable name="appbarTitle" expression="&quot;appbarTitle&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="navBarItem1Text" expression="&quot;navBarItem1Text&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="navBarItem2Text" expression="&quot;navBarItem2Text&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <!--    New Scaffold with AppBar-->
    <template name="scfAppBar" value="return Scaffold(&#10;appBar: AppBar(&#10;title: Text('$appbarTitle$'),&#10;),&#10;body: $body$&#10;);" description="New Scaffold with AppBar" toReformat="false" toShortenFQNames="true">
        <variable name="appbarTitle" expression="&quot;appbarTitle&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="body" expression="&quot;bodyWidget&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <!--    New Scaffold with AppBar and Fab-->
    <template name="scfAppBarFab" value="int _index = 0; // Make sure this is outside build(), otherwise every setState will chage the value back to 0 &#10;&#10;return Scaffold(&#10;appBar: AppBar(&#10;        title: Text('$appbarTitle$'),&#10;),&#10;body: Center(&#10;child: Container(child: Text('You tapped the FAB $_index times')),&#10;),&#10;floatingActionButton: FloatingActionButton(&#10;onPressed: () =&gt; setState(() {&#10;_index++;&#10;}),&#10;tooltip: 'Increment Counter',&#10;child: Icon(Icons.add), //Change Icon&#10;),&#10;floatingActionButtonLocation: FloatingActionButtonLocation.endFloat, //Change for different locations&#10;);" description="New Scaffold with AppBar and Fab" toReformat="false" toShortenFQNames="true">
        <variable name="appbarTitle" expression="&quot;appbarTitle&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <!--    New Scaffold with AppBar and Bottom Nav Bar-->
    <template name="scfAppBarBtmNav" value="int _index = 0; // Make sure this is outside build(), otherwise every setState will change the value back to 0 &#10;&#10;return Scaffold(&#10;appBar: AppBar(&#10;title: Text('$appbarTitle$'),&#10;),&#10;body: Center(&#10;child: Container(child: Text('You are looking at the message for bottom navigation item $_index')),&#10;),&#10;bottomNavigationBar: BottomNavigationBar(&#10;onTap: (tappedItemIndex) =&gt; setState(() {&#10;_index = tappedItemIndex;&#10; }),&#10;currentIndex: _index,&#10;items: [&#10;BottomNavigationBarItem(icon: Icon(Icons.av_timer), title: Text('$navBarItem1Text$')),&#10;BottomNavigationBarItem(icon: Icon(Icons.add), title: Text('$navBarItem2Text$'))&#10;])&#10;);" description="New Scaffold with AppBar &amp; Bottom Nav Bar" toReformat="false" toShortenFQNames="true">
        <variable name="appbarTitle" expression="&quot;appbarTitle&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="navBarItem1Text" expression="&quot;navBarItem1Text&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="navBarItem2Text" expression="&quot;navBarItem2Text&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <!--    StatefulBuilder-->
    <template name="stfulBldr" value="StatefulBuilder(&#10;builder: (BuildContext context, StateSetter setState){&#10;return $widget$&#10;}&#10;)," description="New Stateful Builder" toReformat="false" toShortenFQNames="true">
        <variable name="widget" expression="&quot;widget&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <!--    OrientationBuilder-->
    <template name="orientatBldr" value="OrientationBuilder(&#10;  builder: (BuildContext context, Orientation orientation) {&#10;return GridView.count(&#10;// Create a grid with 2 columns in portrait mode, or 3 columns in&#10;// landscape mode.&#10;crossAxisCount: orientation == Orientation.portrait ? 2 : 3,&#10;);&#10;},&#10;);" description="New OrientationBuilder" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <!--    Material Package Import-->
    <template name="importMat" value="import 'package:flutter/material.dart';" description="Import Material Package" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="DART_TOPLEVEL" value="true" />
        </context>
    </template>
    <!--    Cupertino Package Import-->
    <template name="importCup" value="import 'package:flutter/cupertino.dart';" description="Import Cupertino Package" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="DART_TOPLEVEL" value="true" />
        </context>
    </template>
    <!--    CustomClipper-->
    <template name="customClipper" value="class $name$Clipper extends CustomClipper&lt;Path&gt; {&#10;    &#10;@override&#10;Path getClip(Size size) {&#10;// TODO: implement getClip&#10;}&#10;&#10;@override&#10;bool shouldReclip(CustomClipper&lt;Path&gt; oldClipper) {&#10;// TODO: implement shouldReclip&#10;}&#10;}" description="Create CustomClipper" toReformat="false" toShortenFQNames="true">
        <variable name="name" expression="&quot;name&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_TOPLEVEL" value="true" />
        </context>
    </template>
    <!--    CustomPainter-->
    <template name="customPainter" value="class $name$Painter extends CustomPainter {&#10;&#10;@override&#10;void paint(Canvas canvas, Size size) {&#10;//TODO Implement paint&#10;}&#10;&#10;      @override&#10;bool shouldRepaint($name$Painter oldDelegate) {&#10;//TODO Implement shouldRepaint&#10;}&#10;&#10;@override&#10;bool shouldRebuildSemantics($name$Painter oldDelegate) {&#10;//TODO Implement shouldRebuildSemantics&#10;}&#10;}" description="Create CustomPainter" toReformat="false" toShortenFQNames="true">
        <variable name="name" expression="&quot;name&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_TOPLEVEL" value="true" />
        </context>
    </template>

</templateSet>